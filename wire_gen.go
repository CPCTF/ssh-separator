// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/mazrean/separated-webshell/api"
	"github.com/mazrean/separated-webshell/repository"
	"github.com/mazrean/separated-webshell/service"
	"github.com/mazrean/separated-webshell/ssh"
	"github.com/mazrean/separated-webshell/workspace"
)

// Injectors from wire.go:

func InjectServer() (*Server, error) {
	workspaceWorkspace, err := workspace.NewWorkspace()
	if err != nil {
		return nil, err
	}
	user := repository.NewUser()
	transaction := repository.NewTransaction()
	serviceUser, err := service.NewUser(workspaceWorkspace, user, transaction)
	if err != nil {
		return nil, err
	}
	apiUser := api.NewUser(serviceUser)
	apiAPI := api.NewAPI(apiUser)
	sshSSH := ssh.NewSSH(serviceUser)
	server, err := NewServer(apiAPI, sshSSH)
	if err != nil {
		return nil, err
	}
	return server, nil
}

// wire.go:

var (
	transactionBind    = wire.Bind(new(repository.ITransaction), new(*repository.Transaction))
	repositoryUserBind = wire.Bind(new(repository.IUser), new(*repository.User))
	workspaceBind      = wire.Bind(new(workspace.IWorkspace), new(*workspace.Workspace))
	serviceUserBind    = wire.Bind(new(service.IUser), new(*service.User))
)

type Server struct {
	*api.API
	*ssh.SSH
}

func NewServer(a *api.API, s *ssh.SSH) (*Server, error) {
	return &Server{
		API: a,
		SSH: s,
	}, nil
}
