// Code generated by MockGen. DO NOT EDIT.
// Source: workspace.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	reflect "reflect"

	domain "github.com/CPCTF2022/ssh-separator/domain"
	values "github.com/CPCTF2022/ssh-separator/domain/values"
	gomock "github.com/golang/mock/gomock"
)

// MockIWorkspace is a mock of IWorkspace interface.
type MockIWorkspace struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkspaceMockRecorder
}

// MockIWorkspaceMockRecorder is the mock recorder for MockIWorkspace.
type MockIWorkspaceMockRecorder struct {
	mock *MockIWorkspace
}

// NewMockIWorkspace creates a new mock instance.
func NewMockIWorkspace(ctrl *gomock.Controller) *MockIWorkspace {
	mock := &MockIWorkspace{ctrl: ctrl}
	mock.recorder = &MockIWorkspaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorkspace) EXPECT() *MockIWorkspaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIWorkspace) Get(ctx context.Context, userName values.UserName) (*domain.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userName)
	ret0, _ := ret[0].(*domain.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIWorkspaceMockRecorder) Get(ctx, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIWorkspace)(nil).Get), ctx, userName)
}

// Set mocks base method.
func (m *MockIWorkspace) Set(ctx context.Context, userName values.UserName, workspace *domain.Workspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, userName, workspace)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIWorkspaceMockRecorder) Set(ctx, userName, workspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIWorkspace)(nil).Set), ctx, userName, workspace)
}
