// Code generated by MockGen. DO NOT EDIT.
// Source: workspace.go

// Package mock_workspace is a generated GoMock package.
package mock_workspace

import (
	context "context"
	reflect "reflect"

	domain "github.com/CPCTF2022/ssh-separator/domain"
	values "github.com/CPCTF2022/ssh-separator/domain/values"
	gomock "github.com/golang/mock/gomock"
)

// MockIWorkspace is a mock of IWorkspace interface.
type MockIWorkspace struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkspaceMockRecorder
}

// MockIWorkspaceMockRecorder is the mock recorder for MockIWorkspace.
type MockIWorkspaceMockRecorder struct {
	mock *MockIWorkspace
}

// NewMockIWorkspace creates a new mock instance.
func NewMockIWorkspace(ctrl *gomock.Controller) *MockIWorkspace {
	mock := &MockIWorkspace{ctrl: ctrl}
	mock.recorder = &MockIWorkspaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorkspace) EXPECT() *MockIWorkspaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIWorkspace) Create(ctx context.Context, userName values.UserName) (*domain.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userName)
	ret0, _ := ret[0].(*domain.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIWorkspaceMockRecorder) Create(ctx, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIWorkspace)(nil).Create), ctx, userName)
}

// Recreate mocks base method.
func (m *MockIWorkspace) Recreate(ctx context.Context, workspace *domain.Workspace) (*domain.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recreate", ctx, workspace)
	ret0, _ := ret[0].(*domain.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recreate indicates an expected call of Recreate.
func (mr *MockIWorkspaceMockRecorder) Recreate(ctx, workspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recreate", reflect.TypeOf((*MockIWorkspace)(nil).Recreate), ctx, workspace)
}

// Start mocks base method.
func (m *MockIWorkspace) Start(ctx context.Context, workspace *domain.Workspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, workspace)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockIWorkspaceMockRecorder) Start(ctx, workspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIWorkspace)(nil).Start), ctx, workspace)
}

// Stop mocks base method.
func (m *MockIWorkspace) Stop(ctx context.Context, workspace *domain.Workspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, workspace)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockIWorkspaceMockRecorder) Stop(ctx, workspace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIWorkspace)(nil).Stop), ctx, workspace)
}
