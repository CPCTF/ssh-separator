// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/mazrean/separated-webshell/domain"
	values "github.com/mazrean/separated-webshell/domain/values"
)

// MockIUser is a mock of IUser interface.
type MockIUser struct {
	ctrl     *gomock.Controller
	recorder *MockIUserMockRecorder
}

// MockIUserMockRecorder is the mock recorder for MockIUser.
type MockIUserMockRecorder struct {
	mock *MockIUser
}

// NewMockIUser creates a new mock instance.
func NewMockIUser(ctrl *gomock.Controller) *MockIUser {
	mock := &MockIUser{ctrl: ctrl}
	mock.recorder = &MockIUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUser) EXPECT() *MockIUserMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockIUser) New(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockIUserMockRecorder) New(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockIUser)(nil).New), ctx, user)
}

// SSHAuth mocks base method.
func (m *MockIUser) SSHAuth(ctx context.Context, user *domain.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHAuth", ctx, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSHAuth indicates an expected call of SSHAuth.
func (mr *MockIUserMockRecorder) SSHAuth(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHAuth", reflect.TypeOf((*MockIUser)(nil).SSHAuth), ctx, user)
}

// SSHHandler mocks base method.
func (m *MockIUser) SSHHandler(ctx context.Context, userName values.UserName, connection *domain.Connection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHHandler", ctx, userName, connection)
	ret0, _ := ret[0].(error)
	return ret0
}

// SSHHandler indicates an expected call of SSHHandler.
func (mr *MockIUserMockRecorder) SSHHandler(ctx, userName, connection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHHandler", reflect.TypeOf((*MockIUser)(nil).SSHHandler), ctx, userName, connection)
}
